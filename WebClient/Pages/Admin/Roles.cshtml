@page
@model WebClient.Pages.Admin.RolesModel
@{
    ViewData["Title"] = "Quản lý vai trò";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Danh sách vai trò</h2>
    <div>
        <button type="button" class="btn btn-success me-2" onclick="showAddRoleModal()">
            <i class="fas fa-plus"></i> Thêm vai trò
        </button>
        <button type="button" class="btn btn-primary" onclick="refreshRoles()">
            <i class="fas fa-sync-alt"></i> Làm mới
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.Message))
{
    <div class="alert @(Model.IsError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
        @Model.Message
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Roles Table -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Danh sách vai trò</h6>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered table-hover" id="rolesTable">
                <thead class="table-dark">
                    <tr style="color: #ffffff;">
                        <th>Tên vai trò</th>
                        <th>Số người dùng</th>
                        <th>Trạng thái</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Roles?.Any() == true)
                    {
                        @foreach (var role in Model.Roles)
                        {
                            <tr>
                                <td>
                                    <strong>@role.Name</strong>
                                    @if (role.Name == "Admin" || role.Name == "User" || role.Name == "Librarian")
                                    {
                                        <span class="badge bg-info ms-1">Hệ thống</span>
                                    }
                                </td>
                                <td>
                                    <span class="badge bg-secondary">@role.UserCount người dùng</span>
                                </td>
                                <td>
                                    <span class="badge bg-success">Hoạt động</span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showUsersInRole('@role.Id', '@role.Name')">
                                            <i class="fas fa-users"></i> Xem người dùng
                                        </button>
                                        @if (role.Name != "Admin" && role.Name != "User" && role.Name != "Librarian")
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="editRole('@role.Id')">
                                                <i class="fas fa-edit"></i> Sửa
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteRole('@role.Id', '@role.Name')">
                                                <i class="fas fa-trash"></i> Xóa
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">Không có dữ liệu</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add Role Modal -->
<div class="modal fade" id="addRoleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm vai trò mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="addRoleForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="addRoleName" class="form-label">Tên vai trò *</label>
                        <input type="text" class="form-control" id="addRoleName" name="Name" required maxlength="50">
                        <div class="form-text">Tên vai trò phải duy nhất và không quá 50 ký tự.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-success">Tạo vai trò</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Role Modal -->
<div class="modal fade" id="editRoleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chỉnh sửa vai trò</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editRoleForm">
                <div class="modal-body">
                    <input type="hidden" id="editRoleId" name="Id" />
                    
                    <div class="mb-3">
                        <label for="editRoleName" class="form-label">Tên vai trò *</label>
                        <input type="text" class="form-control" id="editRoleName" name="Name" required maxlength="50">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Users in Role Modal -->
<div class="modal fade" id="usersInRoleModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="usersInRoleTitle">Người dùng trong vai trò</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="usersInRoleContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function refreshRoles() {
            location.reload();
        }

        function showAddRoleModal() {
            document.getElementById('addRoleForm').reset();
            new bootstrap.Modal(document.getElementById('addRoleModal')).show();
        }

        document.getElementById('addRoleForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const roleData = {
                name: formData.get('Name')
            };

            fetch('https://localhost:7069/api/Roles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + getCookie('JWToken')
                },
                body: JSON.stringify(roleData)
            })
            .then(response => {
                if (response.ok) {
                    alert('Tạo vai trò thành công');
                    location.reload();
                } else {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Lỗi: ' + error.message);
            });
        });

        function editRole(roleId) {
            fetch(`https://localhost:7069/api/Roles/${roleId}`, {
                headers: {
                    'Authorization': 'Bearer ' + getCookie('JWToken')
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi tải dữ liệu: ' + response.statusText);
                }
                return response.json();
            })
            .then(role => {
                document.getElementById('editRoleId').value = role.id;
                document.getElementById('editRoleName').value = role.name;
                
                new bootstrap.Modal(document.getElementById('editRoleModal')).show();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Lỗi khi tải thông tin vai trò: ' + error.message);
            });
        }

        document.getElementById('editRoleForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const roleData = {
                id: formData.get('Id'),
                name: formData.get('Name')
            };

            fetch(`https://localhost:7069/api/Roles/${roleData.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + getCookie('JWToken')
                },
                body: JSON.stringify(roleData)
            })
            .then(response => {
                if (response.ok) {
                    alert('Cập nhật vai trò thành công');
                    location.reload();
                } else {
                    return response.text().then(text => {
                        throw new Error(text);
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Lỗi: ' + error.message);
            });
        });

        function deleteRole(roleId, roleName) {
            if (confirm(`Bạn có chắc chắn muốn xóa vai trò "${roleName}"? Hành động này không thể hoàn tác.`)) {
                fetch(`https://localhost:7069/api/Roles/${roleId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': 'Bearer ' + getCookie('JWToken')
                    }
                })
                .then(response => {
                    if (response.ok) {
                        alert('Xóa vai trò thành công');
                        location.reload();
                    } else {
                        return response.text().then(text => {
                            throw new Error(text);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Lỗi: ' + error.message);
                });
            }
        }

        function showUsersInRole(roleId, roleName) {
            document.getElementById('usersInRoleTitle').textContent = `Người dùng trong vai trò: ${roleName}`;
            document.getElementById('usersInRoleContent').innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;

            fetch(`https://localhost:7069/api/Roles/${roleId}/users`, {
                headers: {
                    'Authorization': 'Bearer ' + getCookie('JWToken')
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Lỗi khi tải dữ liệu');
                }
                return response.json();
            })
            .then(users => {
                let html = '';
                if (users.length > 0) {
                    html = `
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Tên đăng nhập</th>
                                        <th>Email</th>
                                    </tr>
                                </thead>
                                <tbody>
                    `;
                    
                    users.forEach(user => {
                        html += `
                            <tr>
                                <td>${user.userName}</td>
                                <td>${user.email}</td>
                            </tr>
                        `;
                    });
                    
                    html += `
                                </tbody>
                            </table>
                        </div>
                    `;
                } else {
                    html = '<div class="text-center text-muted">Chưa có người dùng nào trong vai trò này</div>';
                }
                
                document.getElementById('usersInRoleContent').innerHTML = html;
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('usersInRoleContent').innerHTML = '<div class="text-center text-danger">Lỗi khi tải dữ liệu</div>';
            });

            new bootstrap.Modal(document.getElementById('usersInRoleModal')).show();
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return '';
        }
    </script>
}
