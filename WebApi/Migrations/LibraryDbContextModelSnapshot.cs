// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "260ebbe5-3f29-4e5c-b7d3-5b0f9c7acadd",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsqi5CRE5CFy+KqNhqMtaGKvm9a4jIc+zrY3FyvKw5GcS0bdsyM6nm6wg3liqbPdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "157915ab-5324-40cd-8a82-394b5a06eb76",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "librarian-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fc99b9d-2807-4f24-8c46-f71d5d2f3ce5",
                            Email = "librarian@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIBRARIAN@EXAMPLE.COM",
                            NormalizedUserName = "LIBRARIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAED8DpnBUGBMIqDpzjkH8a+VEIDnXINykDOLkifzrap/8BEBW1qbPpzj4SXc+Hjxbgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "518c7ea1-21a6-4440-aa9a-afd593ada28b",
                            TwoFactorEnabled = false,
                            UserName = "librarian"
                        },
                        new
                        {
                            Id = "user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad6ebff4-6b54-4ff1-ab38-50d81301ac85",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAELo//5y2DD6XSgd8KkyJYzYIpj5okAn6tnp4nK6Jehxqxt+8McPR71PbwUCOCGHzhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3288fd1-1087-40a6-91a8-e7f2791528b1",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Bio = "Tác giả nổi tiếng với các tác phẩm văn học thiếu nhi.",
                            FirstName = "Nguyễn Nhật",
                            LastName = "Ánh"
                        },
                        new
                        {
                            AuthorId = 2,
                            Bio = "Nhà văn, diễn giả người Mỹ.",
                            FirstName = "Dale",
                            LastName = "Carnegie"
                        },
                        new
                        {
                            AuthorId = 3,
                            Bio = "Chuyên gia đào tạo, diễn giả người Singapore.",
                            FirstName = "Adam",
                            LastName = "Khoo"
                        },
                        new
                        {
                            AuthorId = 4,
                            Bio = "Nhà văn Nhật Bản nổi tiếng với phong cách siêu thực.",
                            FirstName = "Haruki",
                            LastName = "Murakami"
                        },
                        new
                        {
                            AuthorId = 5,
                            Bio = "Tác giả bộ truyện Harry Potter.",
                            FirstName = "J.K.",
                            LastName = "Rowling"
                        },
                        new
                        {
                            AuthorId = 6,
                            Bio = "Ông hoàng truyện kinh dị.",
                            FirstName = "Stephen",
                            LastName = "King"
                        });
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ISBN13")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookId");

                    b.HasIndex("ISBN13")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Description = "Câu chuyện về tuổi thơ hồn nhiên, trong trẻo ở vùng quê.",
                            ISBN13 = "9786042048564",
                            ImageUrl = "https://example.com/hoa-vang.jpg",
                            PublicationYear = 2010,
                            PublisherId = 1,
                            Title = "Tôi thấy hoa vàng trên cỏ xanh"
                        },
                        new
                        {
                            BookId = 2,
                            Description = "Tuyệt tác về nghệ thuật đối nhân xử thế.",
                            ISBN13 = "9786046473130",
                            ImageUrl = "https://example.com/dac-nhan-tam.jpg",
                            PublicationYear = 2012,
                            PublisherId = 2,
                            Title = "Đắc nhân tâm"
                        },
                        new
                        {
                            BookId = 3,
                            Description = "Hướng dẫn phương pháp học tập hiệu quả.",
                            ISBN13 = "9786046473147",
                            ImageUrl = "https://example.com/toi-tai-gioi.jpg",
                            PublicationYear = 2015,
                            PublisherId = 2,
                            Title = "Tôi tài giỏi, bạn cũng thế"
                        },
                        new
                        {
                            BookId = 4,
                            Description = "Tác phẩm tiêu biểu của Haruki Murakami.",
                            ISBN13 = "9786049581907",
                            ImageUrl = "https://example.com/rung-na-uy.jpg",
                            PublicationYear = 2014,
                            PublisherId = 3,
                            Title = "Rừng Na Uy"
                        },
                        new
                        {
                            BookId = 5,
                            Description = "Cuốn sách đầu tiên trong series Harry Potter.",
                            ISBN13 = "9780747532743",
                            ImageUrl = "https://example.com/harry-potter-1.jpg",
                            PublicationYear = 1997,
                            PublisherId = 4,
                            Title = "Harry Potter và Hòn đá Phù thủy"
                        },
                        new
                        {
                            BookId = 6,
                            Description = "Câu chuyện kinh dị về một thực thể bí ẩn.",
                            ISBN13 = "9780451419708",
                            ImageUrl = "https://example.com/it.jpg",
                            PublicationYear = 1986,
                            PublisherId = 4,
                            Title = "IT"
                        },
                        new
                        {
                            BookId = 7,
                            Description = "Cuộc hành trình của cậu bé chăn cừu đi tìm kho báu.",
                            ISBN13 = "9786049581914",
                            ImageUrl = "https://example.com/nha-gia-kim.jpg",
                            PublicationYear = 2010,
                            PublisherId = 3,
                            Title = "Nhà giả kim"
                        },
                        new
                        {
                            BookId = 8,
                            Description = "Bộ truyện tranh kinh điển của Nhật Bản.",
                            ISBN13 = "9786042079087",
                            ImageUrl = "https://example.com/bay-vien-ngoc-rong.jpg",
                            PublicationYear = 2011,
                            PublisherId = 1,
                            Title = "Bảy viên ngọc rồng"
                        },
                        new
                        {
                            BookId = 9,
                            Description = "Từ vượn người tới người tinh khôn.",
                            ISBN13 = "9786049581921",
                            ImageUrl = "https://example.com/luoc-su-loai-nguoi.jpg",
                            PublicationYear = 2013,
                            PublisherId = 3,
                            Title = "Lược sử loài người"
                        },
                        new
                        {
                            BookId = 10,
                            Description = "Câu chuyện cảm động về một chú chó.",
                            ISBN13 = "9786042079094",
                            ImageUrl = "https://example.com/toi-la-beto.jpg",
                            PublicationYear = 2015,
                            PublisherId = 1,
                            Title = "Tôi là Bê-Tô"
                        },
                        new
                        {
                            BookId = 11,
                            Description = "Series truyện trinh thám nổi tiếng.",
                            ISBN13 = "9786042079100",
                            ImageUrl = "https://example.com/conan.jpg",
                            PublicationYear = 2018,
                            PublisherId = 1,
                            Title = "Thám tử lừng danh Conan"
                        },
                        new
                        {
                            BookId = 12,
                            Description = "Câu chuyện về luật nhân quả.",
                            ISBN13 = "9786042079117",
                            ImageUrl = "https://example.com/muon-kiep-nhan-sinh.jpg",
                            PublicationYear = 2020,
                            PublisherId = 2,
                            Title = "Muôn kiếp nhân sinh"
                        },
                        new
                        {
                            BookId = 13,
                            Description = "Truyện tranh hài hước về một cô bé tiểu học.",
                            ISBN13 = "9786042079124",
                            ImageUrl = "https://example.com/nhoc-miko.jpg",
                            PublicationYear = 2019,
                            PublisherId = 1,
                            Title = "Nhóc Miko!"
                        },
                        new
                        {
                            BookId = 14,
                            Description = "Tiểu thuyết trinh thám của Keigo Higashino.",
                            ISBN13 = "9786049581938",
                            ImageUrl = "https://example.com/phai-sau-nghi-can-x.jpg",
                            PublicationYear = 2015,
                            PublisherId = 3,
                            Title = "Phía sau nghi can X"
                        },
                        new
                        {
                            BookId = 15,
                            Description = "Cuốn sách về ý nghĩa của cuộc sống.",
                            ISBN13 = "9786049581945",
                            ImageUrl = "https://example.com/song.jpg",
                            PublicationYear = 2011,
                            PublisherId = 3,
                            Title = "Sống"
                        },
                        new
                        {
                            BookId = 16,
                            Description = "Sách về tâm lý học và cách hiểu người khác.",
                            ISBN13 = "9786046473154",
                            ImageUrl = "https://example.com/doc-vi.jpg",
                            PublicationYear = 2016,
                            PublisherId = 2,
                            Title = "Đọc vị bất kỳ ai"
                        },
                        new
                        {
                            BookId = 17,
                            Description = "Tập hợp các câu chuyện thần thoại Hy Lạp.",
                            ISBN13 = "9780141380922",
                            ImageUrl = "https://example.com/than-thoai-hy-lap.jpg",
                            PublicationYear = 2007,
                            PublisherId = 4,
                            Title = "Thần thoại Hy Lạp"
                        },
                        new
                        {
                            BookId = 18,
                            Description = "Tiểu thuyết châm biếm của Vũ Trọng Phụng.",
                            ISBN13 = "9786049581952",
                            ImageUrl = "https://example.com/so-do.jpg",
                            PublicationYear = 2016,
                            PublisherId = 3,
                            Title = "Số đỏ"
                        },
                        new
                        {
                            BookId = 19,
                            Description = "Tác phẩm của Brian Weiss về tiền kiếp.",
                            ISBN13 = "9786046473161",
                            ImageUrl = "https://example.com/kiep-nao.jpg",
                            PublicationYear = 2019,
                            PublisherId = 2,
                            Title = "Kiếp nào ta cũng tìm thấy nhau"
                        },
                        new
                        {
                            BookId = 20,
                            Description = "Câu chuyện triết lý về tình yêu và cuộc sống.",
                            ISBN13 = "9786042079131",
                            ImageUrl = "https://example.com/hoang-tu-be.jpg",
                            PublicationYear = 2018,
                            PublisherId = 1,
                            Title = "Hoàng tử bé"
                        });
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 15,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 16,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 17,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 18,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 19,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 20,
                            AuthorId = 1
                        });
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 5,
                            CategoryId = 6
                        },
                        new
                        {
                            BookId = 6,
                            CategoryId = 5
                        },
                        new
                        {
                            BookId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 9,
                            CategoryId = 7
                        },
                        new
                        {
                            BookId = 10,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 11,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 12,
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 13,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 14,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 15,
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 16,
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 17,
                            CategoryId = 7
                        },
                        new
                        {
                            BookId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 19,
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 20,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("BookItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("ShelfLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ItemId");

                    b.HasIndex("BookId");

                    b.ToTable("BookItems");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Barcode = "BK-0001-A",
                            BookId = 1,
                            ShelfLocation = "Shelf-1-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 2,
                            Barcode = "BK-0001-B",
                            BookId = 1,
                            ShelfLocation = "Shelf-1-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 3,
                            Barcode = "BK-0001-C",
                            BookId = 1,
                            ShelfLocation = "Shelf-1-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 4,
                            Barcode = "BK-0002-A",
                            BookId = 2,
                            ShelfLocation = "Shelf-2-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 5,
                            Barcode = "BK-0002-B",
                            BookId = 2,
                            ShelfLocation = "Shelf-2-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 6,
                            Barcode = "BK-0002-C",
                            BookId = 2,
                            ShelfLocation = "Shelf-2-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 7,
                            Barcode = "BK-0003-A",
                            BookId = 3,
                            ShelfLocation = "Shelf-3-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 8,
                            Barcode = "BK-0003-B",
                            BookId = 3,
                            ShelfLocation = "Shelf-3-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 9,
                            Barcode = "BK-0003-C",
                            BookId = 3,
                            ShelfLocation = "Shelf-3-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 10,
                            Barcode = "BK-0004-A",
                            BookId = 4,
                            ShelfLocation = "Shelf-4-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 11,
                            Barcode = "BK-0004-B",
                            BookId = 4,
                            ShelfLocation = "Shelf-4-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 12,
                            Barcode = "BK-0004-C",
                            BookId = 4,
                            ShelfLocation = "Shelf-4-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 13,
                            Barcode = "BK-0005-A",
                            BookId = 5,
                            ShelfLocation = "Shelf-5-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 14,
                            Barcode = "BK-0005-B",
                            BookId = 5,
                            ShelfLocation = "Shelf-5-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 15,
                            Barcode = "BK-0005-C",
                            BookId = 5,
                            ShelfLocation = "Shelf-5-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 16,
                            Barcode = "BK-0006-A",
                            BookId = 6,
                            ShelfLocation = "Shelf-6-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 17,
                            Barcode = "BK-0006-B",
                            BookId = 6,
                            ShelfLocation = "Shelf-6-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 18,
                            Barcode = "BK-0006-C",
                            BookId = 6,
                            ShelfLocation = "Shelf-6-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 19,
                            Barcode = "BK-0007-A",
                            BookId = 7,
                            ShelfLocation = "Shelf-7-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 20,
                            Barcode = "BK-0007-B",
                            BookId = 7,
                            ShelfLocation = "Shelf-7-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 21,
                            Barcode = "BK-0007-C",
                            BookId = 7,
                            ShelfLocation = "Shelf-7-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 22,
                            Barcode = "BK-0008-A",
                            BookId = 8,
                            ShelfLocation = "Shelf-8-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 23,
                            Barcode = "BK-0008-B",
                            BookId = 8,
                            ShelfLocation = "Shelf-8-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 24,
                            Barcode = "BK-0008-C",
                            BookId = 8,
                            ShelfLocation = "Shelf-8-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 25,
                            Barcode = "BK-0009-A",
                            BookId = 9,
                            ShelfLocation = "Shelf-9-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 26,
                            Barcode = "BK-0009-B",
                            BookId = 9,
                            ShelfLocation = "Shelf-9-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 27,
                            Barcode = "BK-0009-C",
                            BookId = 9,
                            ShelfLocation = "Shelf-9-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 28,
                            Barcode = "BK-0010-A",
                            BookId = 10,
                            ShelfLocation = "Shelf-10-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 29,
                            Barcode = "BK-0010-B",
                            BookId = 10,
                            ShelfLocation = "Shelf-10-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 30,
                            Barcode = "BK-0010-C",
                            BookId = 10,
                            ShelfLocation = "Shelf-10-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 31,
                            Barcode = "BK-0011-A",
                            BookId = 11,
                            ShelfLocation = "Shelf-11-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 32,
                            Barcode = "BK-0011-B",
                            BookId = 11,
                            ShelfLocation = "Shelf-11-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 33,
                            Barcode = "BK-0011-C",
                            BookId = 11,
                            ShelfLocation = "Shelf-11-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 34,
                            Barcode = "BK-0012-A",
                            BookId = 12,
                            ShelfLocation = "Shelf-12-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 35,
                            Barcode = "BK-0012-B",
                            BookId = 12,
                            ShelfLocation = "Shelf-12-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 36,
                            Barcode = "BK-0012-C",
                            BookId = 12,
                            ShelfLocation = "Shelf-12-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 37,
                            Barcode = "BK-0013-A",
                            BookId = 13,
                            ShelfLocation = "Shelf-13-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 38,
                            Barcode = "BK-0013-B",
                            BookId = 13,
                            ShelfLocation = "Shelf-13-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 39,
                            Barcode = "BK-0013-C",
                            BookId = 13,
                            ShelfLocation = "Shelf-13-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 40,
                            Barcode = "BK-0014-A",
                            BookId = 14,
                            ShelfLocation = "Shelf-14-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 41,
                            Barcode = "BK-0014-B",
                            BookId = 14,
                            ShelfLocation = "Shelf-14-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 42,
                            Barcode = "BK-0014-C",
                            BookId = 14,
                            ShelfLocation = "Shelf-14-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 43,
                            Barcode = "BK-0015-A",
                            BookId = 15,
                            ShelfLocation = "Shelf-15-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 44,
                            Barcode = "BK-0015-B",
                            BookId = 15,
                            ShelfLocation = "Shelf-15-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 45,
                            Barcode = "BK-0015-C",
                            BookId = 15,
                            ShelfLocation = "Shelf-15-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 46,
                            Barcode = "BK-0016-A",
                            BookId = 16,
                            ShelfLocation = "Shelf-16-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 47,
                            Barcode = "BK-0016-B",
                            BookId = 16,
                            ShelfLocation = "Shelf-16-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 48,
                            Barcode = "BK-0016-C",
                            BookId = 16,
                            ShelfLocation = "Shelf-16-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 49,
                            Barcode = "BK-0017-A",
                            BookId = 17,
                            ShelfLocation = "Shelf-17-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 50,
                            Barcode = "BK-0017-B",
                            BookId = 17,
                            ShelfLocation = "Shelf-17-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 51,
                            Barcode = "BK-0017-C",
                            BookId = 17,
                            ShelfLocation = "Shelf-17-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 52,
                            Barcode = "BK-0018-A",
                            BookId = 18,
                            ShelfLocation = "Shelf-18-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 53,
                            Barcode = "BK-0018-B",
                            BookId = 18,
                            ShelfLocation = "Shelf-18-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 54,
                            Barcode = "BK-0018-C",
                            BookId = 18,
                            ShelfLocation = "Shelf-18-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 55,
                            Barcode = "BK-0019-A",
                            BookId = 19,
                            ShelfLocation = "Shelf-19-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 56,
                            Barcode = "BK-0019-B",
                            BookId = 19,
                            ShelfLocation = "Shelf-19-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 57,
                            Barcode = "BK-0019-C",
                            BookId = 19,
                            ShelfLocation = "Shelf-19-C",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 58,
                            Barcode = "BK-0020-A",
                            BookId = 20,
                            ShelfLocation = "Shelf-20-A",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 59,
                            Barcode = "BK-0020-B",
                            BookId = 20,
                            ShelfLocation = "Shelf-20-B",
                            Status = "Available"
                        },
                        new
                        {
                            ItemId = 60,
                            Barcode = "BK-0020-C",
                            BookId = 20,
                            ShelfLocation = "Shelf-20-C",
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Thiếu nhi"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Kỹ năng sống"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tâm lý học"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Tiểu thuyết"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Kinh dị"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Khoa học viễn tưởng"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Lịch sử"
                        });
                });

            modelBuilder.Entity("Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FineId");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("LibrarianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoanId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "librarian-role",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = "user-role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-1",
                            RoleId = "admin-role"
                        },
                        new
                        {
                            UserId = "librarian-1",
                            RoleId = "librarian-role"
                        },
                        new
                        {
                            UserId = "user-1",
                            RoleId = "user-role"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Address = "Hà Nội",
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            PublisherId = 2,
                            Address = "TP. Hồ Chí Minh",
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            PublisherId = 3,
                            Address = "Hà Nội",
                            Name = "Nhã Nam"
                        },
                        new
                        {
                            PublisherId = 4,
                            Address = "New York, USA",
                            Name = "Penguin Books"
                        });
                });

            modelBuilder.Entity("WebApi.Models.BookingRoom", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingRooms");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            CheckInDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1,
                            Status = 0,
                            UserId = "user-1"
                        },
                        new
                        {
                            BookingId = 2,
                            CheckInDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 2,
                            Status = 1,
                            UserId = "user-1"
                        },
                        new
                        {
                            BookingId = 3,
                            CheckInDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 3,
                            Status = 0,
                            UserId = "user-1"
                        },
                        new
                        {
                            BookingId = 4,
                            CheckInDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 1,
                            Status = 1,
                            UserId = "user-1"
                        },
                        new
                        {
                            BookingId = 5,
                            CheckInDate = new DateTime(2025, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2025, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = 4,
                            Status = 2,
                            UserId = "user-1"
                        });
                });

            modelBuilder.Entity("WebApi.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebApi.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebApi.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            IsAvailable = true,
                            PricePerNight = 50.00m,
                            RoomDescription = "Phòng họp cho 4-6 người, có màn hình chiếu.",
                            RoomName = "Phòng họp nhỏ"
                        },
                        new
                        {
                            RoomId = 2,
                            IsAvailable = true,
                            PricePerNight = 100.00m,
                            RoomDescription = "Phòng họp cho 10-15 người, có bảng trắng.",
                            RoomName = "Phòng họp lớn"
                        },
                        new
                        {
                            RoomId = 3,
                            IsAvailable = true,
                            PricePerNight = 30.00m,
                            RoomDescription = "Phòng yên tĩnh, dành cho cá nhân nghiên cứu.",
                            RoomName = "Phòng nghiên cứu 1"
                        },
                        new
                        {
                            RoomId = 4,
                            IsAvailable = true,
                            PricePerNight = 30.00m,
                            RoomDescription = "Phòng yên tĩnh, dành cho cá nhân nghiên cứu.",
                            RoomName = "Phòng nghiên cứu 2"
                        },
                        new
                        {
                            RoomId = 5,
                            IsAvailable = true,
                            PricePerNight = 80.00m,
                            RoomDescription = "Không gian linh hoạt, có thể tổ chức workshop.",
                            RoomName = "Phòng đa năng"
                        });
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.HasOne("Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookAuthor", b =>
                {
                    b.HasOne("Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookItem", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany("BookItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Fine", b =>
                {
                    b.HasOne("Loan", "Loan")
                        .WithOne("Fine")
                        .HasForeignKey("Fine", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Loan", b =>
                {
                    b.HasOne("BookItem", "BookItem")
                        .WithMany("Loans")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Librarian")
                        .WithMany("LoansAsLibrarian")
                        .HasForeignKey("LibrarianId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("LoansAsUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookItem");

                    b.Navigation("Librarian");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.BookingRoom", b =>
                {
                    b.HasOne("WebApi.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("BookingRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Comment", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.Rating", b =>
                {
                    b.HasOne("Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("BookingRooms");

                    b.Navigation("Comments");

                    b.Navigation("LoansAsLibrarian");

                    b.Navigation("LoansAsUser");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookCategories");

                    b.Navigation("BookItems");

                    b.Navigation("Comments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BookItem", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("Loan", b =>
                {
                    b.Navigation("Fine");
                });

            modelBuilder.Entity("Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WebApi.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("WebApi.Models.Room", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
